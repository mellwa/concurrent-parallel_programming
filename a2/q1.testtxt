TOKEN-RING TEST DOCUMENTATION
=============================
This program simulate token-ring algorithm that is used in a distributed system
to control access to a shared transmission channel. The unit of transmission is
called a frame. Three types of frames: token, data, and ack. There is only one
token in the system. When a station receives the token frame, it can conceptually
hold the token and then send a data frame. The destination station conceptually
removes the data frame and immediately generates an ack frame that is sent around
the ring back to the sender must forward the token to its neighbour and wait for
the token to return, before transmitting another data frame or making another 
reservation.

USER INTERFACE TESTING
    There is no user interface to be tested, so the testing focuses
    solely on the algorithm used for the conversion.

ALGORITHM TESTING

    TEST 1:
    --------
        DATA DESCRIPTION
        The first input is standard input from keyboard.
            1	1 1 3 0
            2	1 2 1 0
            3	1 3 1 4
            4	10 4 2 7
        Line 1-3 are used to check if the program can work well for all three
        stations. Also, check if the frame's priority will be reserved changed
        since there is a request has a higher priority than the frame. Line 4 is
        used to check if the program can ignore bad send request.
        
        TESTING
        Here is the script-fixed log of the testing performed with line numbers
        attached.

            1	Script started on Sun 02 Feb 2014 04:46:26 PM EST
            2	c99chen@ubuntu1204-002:~/cs343/a2$ ./tokenring 4
            3	1 1 3 0
            4	1 2 1 0
            5	1 3 1 4
            6	10 4 2 7
            7	ignoring bad send request: 10 4 2 7
            8	round	s:0	s:1	s:2	s:3
            9	0	p0:tok	p0:tok	p0:tok	p0:tok
            10	1	p0:tok	p0:d1,3	p0:d1,3	p4:a3,1
            11	2	p4:a3,1	p4:tok	p4:tok	p0:d3,1
            12	3	p0:d3,1	p0:a1,3	p0:a1,3	p0:tok
            13	4	p0:tok	p0:tok	p0:d2,1	p0:d2,1
            14	5	p0:d2,1	p0:a1,2	p0:tok
            15	c99chen@ubuntu1204-002:~/cs343/a2$ exit
            16	exit
            17
            18	Script done on Sun 02 Feb 2014 04:47:45 PM EST
            
        ANALYSIS
        The results from running program on standard input show that:
        1) The bad request has been handled correctly and print out a correct
        error message in line 7.
        2) The program read standard input correctly and print out an expected
        result of token-ring. This is shown in line 3 to 6 and line 9 to 14
        
        The test for standard input has been verified on line 3-6.
        
        From this we can say that the standard input in main loop has been exercised,
        and the basic token-ring algorithm has been shown to be correct.
        
    
    TEST 2:
    -------
        DATA DESCRIPTION:
        "data.in", is an input file. The contents of the file, with each line
        numbered, are:
        
             1	3 1 0 0
             2	5 0 3 1
             3	7 3 3 9
        
        Line 3 is used to test if program can handle bad request from one station
        to itself

        TESTING
        Here is the script-fixed log of the testing performed with line numbers
        attached.
        
            1	Script started on Sun 02 Feb 2014 05:44:03 PM EST
            2	c99chen@ubuntu1204-002:~/cs343/a2$ ./tokenring 5 data.in
            3	ignoring bad send request: 7 3 3 9
            4	round	s:0	s:1	s:2	s:3	s:4
            5	0	p0:tok	p0:tok	p0:tok	p0:tok	p0:tok
            6	1	p0:tok	p0:tok	p0:tok	p0:tok	p0:tok
            7	2	p0:tok	p0:tok	p0:tok	p0:tok	p0:tok
            8	3	p0:tok	p0:d1,0	p0:d1,0	p0:d1,0	p0:d1,0
            9	4	p0:a0,1	p0:tok	p0:tok	p0:tok	p0:tok
            10	5	p0:d0,3	p0:d0,3	p0:d0,3	p0:a3,0	p0:a3,0
            11	6	p0:tok
            12	c99chen@ubuntu1204-002:~/cs343/a2$ exit
            13	exit
            14
            15	Script done on Sun 02 Feb 2014 05:44:14 PM EST

        ANALYSIS
        The results from running the program on "data.in" show that:
        1) The sending request has been ignored in line 3
        2) The program can read data from a file
        
        From this we can say that the program can handle bad send request and can
        read data from a specific file
        

    TEST 3:
    ------
        DATA DESCRIPTION:
        "data2.in", is an input file. This file is generated by a c++ file named
        gen.cc that the code is:

            1   int main(){
            2       int round, src, dst, prio;
            3       srand(300);
            4       for(int i = 0; i < 5000; i++){
            5           round = rand()%200;
            6           src = rand()%100;
            7           dst = rand()%100;
            8           prio = rand()%100;
            9           cout<<round<<" "<<src<<" "<<dst<<" "<<prio<<endl;
            10      }
            11      cout<<round<<" "<<src<<" "<<dst<<" "<<prio;
            12      return 0;
            13  }
            
        The data2.in contains 5000 lines. Since there is a sample output file
        tokenring_64, I created a runsuite file to compare the output from sample
        and the output from my program. The code of runsuite(shell script) is:

             1	#!/bin/bash
             2	if [ ${#} -ne 1 ]; then
             3		echo "Expect only one argument: test-file. "
             4		echo "Incorrect number of command line arguments." >&2
             5		exit 1
             6	fi
             7	SOLN=./tokenring_64 # correct soln
             8	MYFUN=./tokenring # my solution
             9	fail=0
             10	for (( i=2; i<= 100; i +=1 ));do
             11		$SOLN $i ${1} > out.out
             12		$MYFUN $i ${1} > soln.out
             13		diff out.out soln.out > /dev/null
             14		if [ ${?} -ne 0 ]; then
             15			echo “Test failed:” $CONFIG $i
             16			diff out.out soln.out > $i.out
             17			fail=1
             18		else
             19			rm out.out
             20			rm soln.out
             21		fi
             22	done
             23	if [ $fail -ne 1 ]; then
             24		echo “ALL TESTS PASSED”
             25	fi
             
        In line 10 to 22, if there is a test failed, we will see a "Test failed:"
        with the number on screen and also there is an output file with different
        content created in current directory. If all tests passed, we will see a
        message "ALL TESTS PASSED".
        
        TESTING
        Here is the script-fixed log of the testing performed with line numbers
        attached.
        
                 1	Script started on Sun 02 Feb 2014 06:32:57 PM EST
                 2	c99chen@ubuntu1204-002:~/cs343/a2$ g++ -o gen gen.cc
                 3	c99chen@ubuntu1204-002:~/cs343/a2$ ./gen > data2.in
                 4	c99chen@ubuntu1204-002:~/cs343/a2$ ./runsuite data2.in
                 5	“ALL TESTS PASSED”
                 6	c99chen@ubuntu1204-002:~/cs343/a2$ exit
                 7	exit
                 8
                 9	Script done on Sun 02 Feb 2014 06:35:14 PM EST
             
        ANALYSIS
        Since I am testing my solution against the sample solution, and result shows
        that all tests passed, we can say the program has been correctly implemented.


    TEST 4:
    ------
        DATA DESCRIPTION:
            Since we are testing error handler, there is no data input.
            
        TESTING:
        Here is the script-fixed log of the testing performed with line numbers
        attached.
        
             1	Script started on Sun 02 Feb 2014 06:47:16 PM EST
             2	c99chen@ubuntu1204-002:~/cs343/a2$ ./tokenring -1
             3	Usage: ./tokenring stations (2..100) [input-file]
             4	c99chen@ubuntu1204-002:~/cs343/a2$ ./tokenring 1
             5	Usage: ./tokenring stations (2..100) [input-file]
             6	c99chen@ubuntu1204-002:~/cs343/a2$ ./tokenring 101
             7	Usage: ./tokenring stations (2..100) [input-file]
             8	c99chen@ubuntu1204-002:~/cs343/a2$ ./tokenring 101 data2.in
             9	Usage: ./tokenring stations (2..100) [input-file]
             10	c99chen@ubuntu1204-002:~/cs343/a2$ ./tokenring 0 data2.in
             11	Usage: ./tokenring stations (2..100) [input-file]
             12	c99chen@ubuntu1204-002:~/cs343/a2$ ./tokenring 3 abc.in
             13	Error! Could not open output file "abc.in"
             14	Usage: ./tokenring stations (2..100) [input-file]
             15	c99chen@ubuntu1204-002:~/cs343/a2$ ./tokenring 0 abc.in
             16	Error! Could not open output file "abc.in"
             17	Usage: ./tokenring stations (2..100) [input-file]
             18	c99chen@ubuntu1204-002:~/cs343/a2$ exit
             19	exit
             20
             21	Script done on Sun 02 Feb 2014 06:47:59 PM EST
             
        ANALYSIS
        The program can handle incorrect number of stations without input file. 
        This is shown in line 2 to line 7. Program also can handle incorrect number
        of stations with input file. This is shown in line 8 to line 11. In line 12
        to line 17 shows that program can handle invalid file name.
        
        Thus, we can say the program's error handler works correctly.



